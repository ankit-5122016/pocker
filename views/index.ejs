<!DOCTYPE html>
<html>
<head>
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/css/bootstrap.min.css">
  <link rel='stylesheet' href='/stylesheets/style.css' />


</head>
<body>
<div id="app">
  <div class="jumbotron" style="background-color: darkseagreen">
    <div class="container text-center">
      <h1>Card Shuffling</h1>
      <button style="background-color: #00d1b2" @click="displayInitialDeck()">Deal</button>
      <p>{{resultString}}</p>
    </div>
  </div>



  <div class="container-fluid bg-3 text-center">
<!--    <h3>Some of my Work</h3><br>-->
    <div class="row"  style="margin-left:15%">
      <div class="col-sm-2" v-for="card in cards" :class="[card.rank ,card.suit]">
        <img :src="card.image" class="img-responsive" style="width:100%" alt="Image">
      </div>
    </div>
  </div>
</div>


<script src="https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.13/vue.min.js"></script>
<script type="application/javascript">
  new Vue({
    el: '#app',
    data: {
      ranks: ['ace', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'jack', 'queen', 'king'],
      suits: ['clubs','diamonds','hearts','spades'],
      cards: [],
      image:[],
      resultString:""
    },
    methods: {
      displayInitialDeck() {
        this.cards = [];
        for( let s of this.suits) {
          for( let r of this.ranks ) {
            let card = {
              rank: r,
              suit: s,
              image:'/images/'+r+'_of_'+s+'.png'

            }
            this.cards.push(card);
          }
        }
        function shuffle(arra1) {
          let ctr = arra1.length, temp, index;

// While there are elements in the array
          while (ctr > 0) {
// Pick a random index
            index = Math.floor(Math.random() * ctr);
// Decrease ctr by 1
            ctr--;
// And swap the last element with it
            temp = arra1[ctr];
            arra1[ctr] = arra1[index];
            arra1[index] = temp;
          }
          // this.shuffle();
          return arra1;
        }
        this.cards=shuffle(this.cards);
        this.cards=(this.cards).slice(0,5)
        this.mainLogic();
      },
      mainLogic(){
        let valuesArray = [];
        let suitsArray = [];
        let resultString = "";

        for(let l = 0; l < 5; l++){
          valuesArray[l] = this.ranks.indexOf(this.cards[l].rank);
          suitsArray[l] = this.suits.indexOf(this.cards[l].suit);
        }


        switch(duplicateCards()){
          case "2":
            resultString = "1 Pair";
            break;
          case "22":
            resultString = "2 Pairs";
            break;
          case "3":
            resultString = "3 of a Kind";
            break;
          case "23":
          case "32":
            resultString = "Full House";
            break;
          case "4":
            resultString = "4 of a Kind";
            break;
          case "5":
            resultString = "5 of a Kind";
            break;
          default:
            if(isStraight()){
              resultString = "Straight";
            }
            if(isAceStraight()){
              resultString = "Ace Straight";
            }
            break;
        }
        if(isFlush()){
          if(resultString){
            resultString += " and Flush";
          }
          else{
            resultString = "Flush";
          }
        }
        if(!resultString){
          resultString = "nothing...";
        }
        this.resultString =resultString;
        function isFlush(){
          for(let i = 0; i < 4; i ++){
            if(suitsArray[i] != suitsArray[i+1]){
              return false;
            }
          }
          return true;
        }

        function isStraight(){
          let lowest = getLowest();
          for(let i = 1; i < 5; i++){
            if(occurrencesOf(lowest + i) != 1){
              return false
            }
          }
          return true;
        }

        function isAceStraight(){
          let lowest = 9;
          for(let i = 1; i < 4; i++){
            if(occurrencesOf(lowest + i) != 1){
              return false
            }
          }
          return occurrencesOf(1) == 0;
        }

        function getLowest(){
          let min = 12;
          for(let i of valuesArray){
            min = Math.min(min, i);
          }
          return min;
        }

        function duplicateCards(){
          let occurrencesFound = [];
          let result = "";
          for(let i of valuesArray){
            let occurrences = occurrencesOf(i);
            if(occurrences > 1 && occurrencesFound.indexOf(i) == -1){
              result += occurrences;
              occurrencesFound.push(i);
            }
          }
          return result;
        }

        function occurrencesOf(n){
          let count = 0;
          let index = 0;
          do{
            index = valuesArray.indexOf(n, index) + 1;
            if(index == 0){
              break;
            }
            else{
              count ++;
            }
          } while(index < valuesArray.length);
          return count;
        }
      }
    },
  });
</script>
</body>
</html>